호스트 이름 : itbank.linux

로그인은 root계정으로

cd /
ls -l

/ : 최상위 디렉토리 == 모든 파일과 디렉토리의 최상위에 위치하는 디렉토리
/boot : 부팅 과정에서 필요한 정보 파일들의 경로(/밑에 있는 boot)
/bin(binary) : *.exe(실행파일==기본적인 명령어들의 경로)=>일반사용자들도 볼 수 있음
/sbin : *.exe(실행파일 == 시스템 운영, 관리에 필요한 명령어들의 경로)=>root만 볼 수 있음(관리자용 명령어)

====================================================================================
platform	user					location
-----------------------------------------------------------------------------------\
windows		관리자 : administrator			~XP : c:\document&setting
		사용자 : root, itbank			vista ~ : c:\user
-----------------------------------------------------------------------------------\
linux		관리자 : root				/root
		사용자 : administrator, itbank		/home
====================================================================================
		== 윈도우는 관리자와 사용자가 같은 곳에 위치
		== 리눅스는 관리자와 사용자가 다른 곳에 위치
	
		home directory == 사용자에 대한 정보를 저장하는 디렉토리
		
		/root : root의 home directory
		/home : 일반 사용자들의 home directory 가 저장되는 경로

/dev == device == 장치파일들의 경로 == 리눅스 시스템은 장치를 장치로서 인식이아니라 하나의 장치파일로서 기록

/etc == 서버 설정에 필요한 모든 정보파일들의 경로

/var == 로그 파일들의 경로

swap == virtual memory == HDD의 일부분을 메모리처럼 사용 == 부족한 시스템 메모리 보완 == 통상적으로 시스템 메모리 2배 설정

======================================================================================
prompt : root@itbank ~(계정명@호스트명(서버명)현재위치)
# : 관리자 접속
$ : 일반 사용자 접속




192.168.198.0
1.네트워크 설정
edit -> virtual network editor -> nat의 ip주1소의 마지막 0제외한 3자리가 대역->nat setting->gateway ip기억(끝부분 2)
전원모양 -> 유선네트워크설정->유선 킴-> 톱니바퀴 -> 신원 -> 자동으로 연결 ㅊㅋ-> ipv4 -> 주소(수동)-> 주소=>자기 3자리+끝에 내맘한자리(3~254)(리눅스 ip) -> 넷마스크 255.255.255.0 -> 게이트웨이 자기꺼 넣기 .2 -> 서버 168.126.63.1


=>putty=>ip주소적기->모양클릭 -> 커서깜박임 ->글꼴(consolas, 굵게 14)->특성->alt+enter -> 변환(문자셋 -> UTF-8) -> SSH -> 키교환(14 1 교환 순으로 조정) -> 원화면에서 자기꺼 저장


cd ~내가 만든 새 계정으로 들어가자

명령어 사용 형식
	명령어

	명령어 [option]
	
	명령어 [option] [file/directory]
	
	맨 앞의 /는 최상위 디렉터리라고 의미
	[이름]/ => 이름은 디렉터리이다.
	clear : 화면정리
	cd : directory 이동
	mkdir : directory 생성 -p : 하위 경로들이 없어도 같이 만들어줌
	pwd : 현재 경로 알려줌
경로 표기 방식은 절대경로 표기방식과 상대경로 표기 방식이 있다.
절대경로=>이동기준이 취상위 디렉토리 기준		상대경로 => 현재 위치가 기준
1. cd /home/test/c/d/			1. cd ./ or cd . : 현재 디렉토리
2. cd /home/test/c/			2. cd ../ or cd..: 상위 디렉토리
3. cd /home/				3. cd ../../ or cd ..엔터 cd ..엔터
4. cd /home/itbank/			4. cd ./itbank/
5. cd /home/itbank/a/b/			5. cd ./a/b/
6. cd /home/test/c/d/			6. cd ../../../test/c/d/

cd ~[계정명] : 그 계정의 home directory
~ : 접속한 사용자 home directory

: test는 root에서는 하지말자
# ls --help : 도움말, man ls : 도움말(더 친절?)
명령어 --help, man 명령어

ls(list) : 디렉토리안에 목록 확인
-a : 숨김목록들을(.) 포함한 모든 목록들을 표출 
-l : 이 목록에 대한 자세한 정보를 표출하라(허가권, 링크의 개수, (root(uid) root(gid))(소유권)(저 3개가 권한), 크기, 생성시간) ex) ls -l /home/itbank
-d : 지정한 목록의 속성(정보) 표시
-n : uid, gid 형식으로 목록 표시
-F : 목록의 형식을 기호로 표시(목록 다음 /는 디렉토리라는 뜻(허가권 시작이 d)) 반대로 /가 뒤에 없으면 파일, 허가권 시작이 -로 시작, 끝에 *붙어있으면 .exe를 의미한다 == 허가권에 x문자를 포함. *가 없다면 일반 문서 파일 == 허가권에 x문자를 가지지 않는다. -> : symbolic linkfile(심볼링 링크파일) == 바로가기(허가권에 l이 사용)
-R : 디렉토리의 펼친 정보 표시

======================================================================================

복사 
cp = 파일이나 디렉토리 복사
cp [option] [복사할 원본의 경로와 이름] [복사될 사본의 경로와 이름]
		source			target
== 원본과 사본의 파이명이 동일할 경우에는 사본의 파일명은 생략 가능
== 복사와 동시에 파일명 변경 가능



ex)
	mkdir /backup/ => home과 동일한 위치(최상위 루트 뒤에있으니)
	cp /etc/login.defs /backup/
	cp /etc/inittab /backup/
	cp /boot/grub2/grub.cfg /backup/

ex1) /backup/ 디렉토리 안에 파일들을 /home/itbank/ 디렉토리로 복사
	cp /backup/grub.cfg /home/itbank/grub.cfg
	cp /backup/inittab ./
	cp /backup/login.defs ./login


	절대경로 <=> 상대경로
	cp /backup/grub.cfg ./
	cp /backup/inittab /home/itbank/
	cp /backup/login.defs /home/itbank/login

ex2) /home/itbank/ 디렉토리 안에 파일들을 /home/test/c/ 디렉토리로 복사

	cp ./grub.cfg /home/test/c
	cp /home/itbank/inittab ../test/c/
	cp ./login ../test/c/login.defs

ex3) /backup/ 디렉토리 안에 파일들을 /home/test/c/d/ 디렉토리로 복사

ex4) /home/test/c/d/안에 파일들을 /home/itbank/a/b/ 디렉토리로 복사

? : 대체문자 대신표현 ex) /home/itbank/i??????
* : 전부 ex) /home/itbank/*
 ex) cp ../test/c/d/g* ../test/c/d/i* ../test/c/d/l* ./a/b/
또한 한번에 여러개를 지정 다만 같은 곳으로 가야함

디렉토리 복사시 옵션 필요(-r)

======================================================================================
잘라내기
mv = 파일이나 디렉토리 이동 == 사용형식은 cp와 동일(그러나 디렉토리가 옵션 필요없이 이동가능)

/backup/디렉토리 안에 파일들을 /home/itbank/a/디렉토리로 이동

=========================================================================================

rmdir == remove directory == 빈 디렉토리만 삭제 가능
rm == remove == 파일이나 디렉토리를 삭제하는 명령어
	-f : 사용자에게 묻지 않고 바로 삭제
	-r : 디렉토리 삭제
==========================================================================
관리자 비밀먼호 : itbank1004 

=================================================================
touch : 크기가 0인 빈 문서 파일을 생성 == 기존에 파일이 없을 경우
	파일의 시간정보 수정 == 기존에 파일이 있는 경우

alias : 명령어 단축키 => 영구 등록은 아님
ex) alias 1='clear'
ex) unalias 1 => 해제
================================================================================

	cat /etc/passwd : 문서 처음부터 끝까지를 다 출력
	head /etc/passwd : 문서 상위 내용(10줄) 출력 but head -15 /etc/passwd : 15줄 출력 가능
	tail /etc/passwd : 문서 하위 내용(10줄) 출력

	more : 화면 단위로 잘라서 표시 more etc/passwd =>enter 한줄, spacebar : 한 화면
	ex) ls -l /etc/ | more <=> more | ls -l /etc/
	|(pipe) : 하나의 명령어에서 여러개의 명령어를 연결시켜 수행시킬 때 => 명령어 인식은 뒤에부터 한다(순서가중요)

	less : 화면 단위로 잘라서 표시
	== j(아래), k(위)로 이동이 가능 => 재검색 가능 == q(마침)

	nl은 화면 출력시 라인 번호를 같이 출력 => nl /ect/passwd
	ex) ls -l /etc/passwd/ | nl | more

	cat : 			< > == redirection(방향 전환)
				< : 출력 redirection
				> : 입력 redirection
	
	1. 파일의 전체 내용 출력
	ex)	cat /etc/passwd or cat < /etc/passwd(생략 가능)
	2. 파일의 내용을 저장
	ex)	cat /etc/passwd > ./testfile	
				저장
	3. 파일의 생성
	ex)	cat > a(ctrl + d로 끝) => 기존에 파일이 없다면 생성, 있을 경우 원본 초기화
		    생성
	4. 파일의 내용 추가
	ex)	cat >> a
	5. 파일의 병합
	ex) cat a b > c(c라는 파일을 만들고 a가 위로 b가 밑으로 병합)\



==========================================================================================
FTP == file transfer protocol 
put(upload), get(download)
window => client, linux => server
제어판 -> 방화벽 -> 앱허용 -> 파일전송프로그램(없을시 설정변경 -> ftp.exe.검색)-> 둘다 체크
cmd => 자신 파일이 있는 곳으로 이동 => ftp 아이피 주소 => 로그인
=============================================================================
date : 시스템 시간 정보 확인	date 날짜시간연도
ex) date 030109002018 == 시스템 시간정보 수정

rdate -p time.bora.net => 타입서버의 시간정보 확인 => 자동설정
rdate -s time.bora.net => 현재 내 리눅스 시간을 현재 시간으로 설정

== rdate 명령어는 기본적으로 인터넷 연결이 되어야만 사용이 가능하다

cal : 해당 월에 대한 달력표시
ex) cal 07 2018

find : 검색 명령어
ex) find [경로] [옵션] [찾을 파일/디렉토리]
ex) find / -name test, find / -name test -type d, find / -name test -type f
	-newer : 지정한 파일이 생성된 이후 작업한 목록 검색
	find ./ -name "test*" -exec rm {} \; => 검색과 동시에 삭제를 작업 -exec : 실행파일 실행,               {} \; : 지정된 파일들을 의미

========================================================================================

vi editor == 리눅스에서 사용하는 문서 편집기
	== 명령모드, 입력모드, 실행 모드


상하좌우 : kjhl
w : 다음 단어의 처음으로 이동
b : 이전 단어의 처음
e : 다음 단어의 끝


0 : 라인의 맨 앞
$ : 라인의 맨 끝


H : 맨 위
M : 중간
L : 마지막 == 현재 화면 기준으로 이동


gg : 문서의 맨 처음으로 이동 
G : 문서의 맨 끝으로 이동

마크이동(책갈피) :  m + a(저장, 대,소 문자 52개 설정) -> ` + a(이동) => 영구유지가 아니라 문서가 열려있을 때만 가능

i : 현재 커서위치부터 입력
a : 한 칸 우측으로 이동 후 입력
소문자 o : 현재 커서가 위치한 라인 밑으로 빈라인 삽입 후 입력
대문자 O : 현재 커서가 위치한 라인 위로 빈라인 삽입 후 입력
x : == del키
X : == backspace
dd : 현재 커서가 위치한 라인 삭제
[숫자] + dd : 현재 커서가 위치하 라인부터 [숫자]만큼 라인을 제거
yy(복사) + p(붙여넣기, 위치한 라인 이후에 붙여넣게 P : 위로 붙여넣기) : 문자열 복 붙
[숫자] + yy : 현재 커서가 위치한 라인부터 지정한 수만큼 라인복사 == 블록복사

=> 입력 모드 
패턴 검색 == /, ? (n : 아래, N : 위로 but ?는 반대 방향으로간다)
=> esc 키를 누르거나 vi editor를 처음 열었을때 == 명령모드
:set nu : 번호를 붙여줌(라인 번호 확인 가능)
:set nonu : 라인 번호 비활성
:라인번호 : 라인번호로 이동

== /, ? , :를 누르고 작업하는 상태 == 실행 모드

치환 == 찾아 바꾸기 		:[범위]s/[old]/[new]/[option]

1. 해당행 치환 == 치환시킬 문자열이 있는 라인으로 이동 후 치환
ex) :s/where/itbank

2. 지정행 치환 == 치환시킬 문자열이 있는 라인을 지정해서 치환
ex) :10s/itbank/where

3. 영역지정 치환
ex) :20,28s/PASS/HI

4. 전체 범위 치환
ex) :%s/linux/HI

== g 옵션을 사용하지 않으면 라인에 조건에 맞는 문자열이 여러개일 경우 첫번째 문자열만 치환
== g 옵션을 사용하면 조건에 맞는 모든 문자열 치환

:! [명령어] == vi editor를 잠시 내려놓은 상태에서 실행
:.! [명령어] == 현재 커서가 위치한 라인에 명령어 실행 결과가 문서 위에 알려줌(삽입) => 원래 데이터가 사라짐

split mode

ctrl + w + n => 비추, ctrl + ww = > 다른 화면 이동
:q! = 나가기
:w = 저장
:w [경로]/[파일명] = 다른 이름으로 저장
:wq = 저장 후 나가기
== 1가 뒤에 붙으면 강제실행의 의미
:enew == 현재 열려있는 문서창을 닫고 새문서 열기 == 새문서, 빈문서
:e == 불러오기, 열기
:f == 문서정보 확인
:r [파일명] : 현재 커서가 위치한 라인에서 파일명의 내용을 삽입
:r! [명령어] : 현재 커서가 위치한 라인 밑으로 현재 명령어 결과 삽입
:[라인번호]r! [명령어] : 그 라인 밑으로 삽입

===================================================================

사용자 관리
사용자 관련 파일/디렉토리
	/etc/passwd == 사용자 정보 확인, 사용자 생성시 생성된 사용자 정보는 /etc/shadow에 저장되고 저장된 사용자 정보를 /etc/passwd에서 확인 => 여기에 이름이 있으면 등록된 계정이고 없으면 등록되지 않은 계정이다.
	ex) itbank:x:1000:1000:dust:/home/itbank:/bin/bash
		1  2   3    4    5           6         7
	1 : 사용자명 == 계정명
	2 : 패스워드 == 보안상 x문자로 표시
	3 : UID == user id(사용자를 나타태는 숫자)
	4 : GID == group id
	5 : Comment == 주석, 설명
	6 : Directory == 사용자 홈 디렉토리 경로 == 사용자 생성시 사용자명과 동일한 이름으로 자동으로 생성
	7 : shell == 명령어 해석기
	 ex) Bourne shell(sh) : 최초 개발 shell
             Bourn again shell(bash) : linux 표준 shell
	     korn shell(ksh) : unix 표준 shell
	/etc/shadow
	ex) user3:$6$i8dDX~~OK8S1:17612:0:99999:7: : :
		1     2             3   4   5   6 7 8  9
	1 : 사용자명
	2 : 암호화된 패스워드
	3 : 패스워드 최종 수정 일 == 1970년 1월 1일부터의 일수
	4 : 패스워드 변경 최소 일 == 0 == 제한없음
	5 : 패스워드 변경 최대 일 == 99999 == 제한없음
	6 : 패스워드 만료 경고 기간
	7 : 패스워드 종료 일 이후의 유효기간
	8 : 계정 만료 기간
	9 : 예약 필드
	/etc/group => 시스템에 생성되어 있는 그룹 정보 확인
		groupadd [그룹명] == 그룹 생성
		groupadd -g [GID] [그룹명] == GID 지정해서 그룹 생성
		groupdel [그룹명] == 그룹삭제
		usermod -G g1 user1: user1과 g1을 같은 그룹으로 묶는다.(추가등록)
		usermod -g g2 user2: user2에게 g2의 그룹을 준다(그룹 변경)
		더 추가나 삭제하고 싶으면 vi /etc/group에서 작업퍄 
	/etc/gshadow
	/etc/login.defs
	/etc/default/useradd => 기본 생성 정보
	/home/
	/etc/skel/ => 사용자 홈디렉토리 생성시 복사될 기본 정보 파일들의 경로 == 뼈대 == 사용자에게 공지할 내용이 있다면 /etc/skel 디렉토리에 내용을 포함시켜 둘 수 있음
/etc/skel 디렉토리 안에 내용들을  /etc/askel 디렉토리로 복사 해볼 것
	필요하다면 사용자 정의 디렉토리를 만들 수 있다.
== -m -k 옵션을 사용하지 않으면 기본 skel디렉토리 참조
== -m -k 옵션을 사용하면 사용자 정의 skel참조
useradd : 사용자 생성
useradd [옵션] [인자값] [사용자명] -u, -g, -c, -d, -s
useradd -D : 명령어 확인
/etc/default/useradd : 문서 확인
useradd [계정명] == 시스템에 설정되어 있는 기본 생성 정보에 따라서 사용자 생성
GROUP=100 	== 기본 소속 그룹 GID == useradd -D -g : GID변경
HOME=/home	== 홈디렉토리 생성 경로 == useradd -D -b : HOME변경
INACTIVE=-1	== 패스워드 만료일 이후의 유효기간 == (-1, 0, 1 이상의 숫자로 설정)
EXPIRE=		== 계정 만료 기간 == useradd -D -e 연도-월-일
SHELL=/bin/bash	== 기본 shell == useradd -D -s
SKEL=/etc/skel	== 기본 skel
CREATE_MAIL_SPOOL=yes	== 메일함 파일 생성 여부




ex) useradd -c test -s /bin/sh user2 : 코멘트에 test, shell -> /bin/sh
ex) useradd -d /usertest/test test
passwd : 접속되어있는 사용자의 비밀번호를 바꾸겠다
passwd [사용자명] : 사용자의 비번을 바꾸겠다 == 관리자만 가능

=======================================================================================
usermod : 사용자 수정
== 사용형식은 useradd와 동일, useradd는 생성 usermod는 수정

ex) usermod -c testing user5
사용자 정보 이동
ex) usermod -d /linux/user5 user5
     mv /home/user5 /linux/

== /etc/passwd에 등록된 경로와 실제 홈디렉토리 경로를 반드시 일치시켜주어야만 함

=========================================================================================
userdel : 사용자 삭제
userdel [계정명] : 흔적이 남음
userdel -r [계정명] : 아무런 흔적없이 깔끔하게 삭제할때 사용
 /var/spool/mail == 사용자 생성시 사용자명과 동일한 이름으로 메일한 파일이 자동으로 생성되는 경로

================================================================================================

권한 

drwx------. 5 itbank itbank 128 3dnjf 27 15:37 itbank
[permission]    [ ownership]
== 허가권       ==소유권

허가권(10자리 다 허가권이 아님)
목록형식
d : 디렉토리
- : 파일
owner        group        other    
== 소유자	     == 일반 사용자
r  w  x       r  w  x      r  w  x = > 허가권
4  2  1      4  2  1      4  2  1
*100	   *10	     *1
7	   7	     7	== 777 => 읽는 방법
ex) 375 => -wx rwx r-x

r : 읽기(ls)       w : 쓰기	x : 실행 , 접근

== x가 파일에 있다면 실행가능
== x 가 디렉토리에 있다면 접근 가능

== 디렉토리에서는 접근이 되어야만 안에 있는 파일들을 읽거나 쓸 수 있음

------------------------------------------------------------------------------------------------

허가권 변경 명령어
chmod : 허가권 변경

chmod [permission] [변경할 파일/디렉토리]

허가권 변경 방식

1. numeric method : 숫자형태로의 변경 ex) chmod 623 ./inittab
2. symbolic method : 문자상태로의 변경 ex) chmod u-r+x,g+r-w+x,o+r-x ./inittab,
	owner : u
	group : g
	other : o
* r이 없어도 디렉토리안에 내용에 접근은 가능


itbank 사용자 홈디렉토리 허가권 변경하면서 test

확인사항
1. FTP 접속이 안되는가 600, 400,200,000
2. 데이터 업로드가 안되는가 500, 100

소유권 변경 명령어
chown == 소유권 변경
chown UID:GID [변경할 파일/디렉토리]
ex) chown itbank grub.cfg => UID, GID 지정 없이 사용하는 경우에는 UID만 변경
ex) chown itbank:itbank inittab
ex) chown root:itbank login.defs
ex) chown root:root ./*
== 소유권 변경시 : 대신 .을찍을수 있다 
ex) chown .itbank grub.cef => gid변경
ex) chown itbank. inittab => 둘다한번에 변경

	소유권	root:root		root:itbank	itbank:itbank	itbank:root
허가권
755		oooxx		oooxx		ooooo		ooooo

570		ooxxx		oooox		oooxx		oooxx

375		oooxx		ooooo		ooooo		ooooo

455		oooxx		oooxx		ooxxx		ooxxx => x가 없으면 디렉토리 이동이 안됨

001		oooxx		ooxxx		ooxxx		ooxxx

010		ooxxx		oooxx		ooxxx		ooxxx

273		ooooo		ooooo		ooxxx		ooxxx	->html은 x만 있어도 실행가능

135		oooxx		ooooo		oooxx		oooxx

705		oooxx		ooxxx		ooooo		ooooo

316		ooxxx		oooxx		oooox		oooox

770		ooxxx		oooox		oooox		oooox

644		ooxxx		ooxxx		ooxxx		ooxxx

027		ooooo		ooxxx		ooxxx		ooxxx

500		ooxxx		ooxxx		oooxx		oooxx

507		ooooo		ooxxx		oooxx		oooxx








1. FTP접속이되는가
2. html디렉토리가 보이는가
3. html디렉토리로 이동이 가능한가
4. data upload가 가능한가
5. site 출력이되는가
================================================================================================

특수권한

r	w	s	r	w	x	r	w	x : SetUID(4000부터 시작)
		시작은 4000번대로 시작 => 4777(그러나 s가 대문자면 x가 없는 걸로 체크 그래서 4677)


r	w	x	r	w	s	r 	w	x : SetGID
					시작은 2000번대로 시작 = >2777(대문자면 x가 없는걸로체크)


r	w	x	r	w	x	r	w	 t : Sticky bit
								시작은 1000번대로시작 => 1777
								(대문자면 x가 없는걸로 체크)



== Sticky bit == 게시판 성격 특수권한
	    == 관리자와 소유자만 삭제 가능
	    == 공용 디렉토리 허가권으로 주요 사용

== SetUID == 소유자의 권한을 빌려준다(root)
== SetGID == 그룹의 권한을 빌려준다

*which => 실행파일만 검색



==============================================================================================

umask : 줄수 있는 가장 높은 권한에서 지금 주여져 있는 권한을 빼면 umask값이 나옴. 새롭게 무엇을 만들때 기본적으로 설정하는데 도와줌(파일은 x가 붙으면 실행파일이 되므로 666부터 시작)
	원하는 형태의 파일/디렉토리의 허가권을 생성하기 위한 값

umask [변경할 umask값] == umask 변경 => 일시적 변경

777-473 = 304
666-473 = 193

/etc/profile에서 수정하면 영구 변경, 홈디렉토리 변경은 /etc/login.defs에서 가능하다

============================================================================================

ACL == access control list
	== 파일이나 디렉토리의 확장 속성

	setfacl == acl 설정

	-m : acl 수정 	ex) setfacl -m u:itbank:rwx /mcl, setfacl -m o:rwx /mcl
	-x : acl 삭제
	-b : 모든 acl 삭제
	
	getfacl == acl 확인

허가권 끝


	user4 계정이 삭제되어 있고 흔적만 남아있는 환경에서 기존의 흔적을 사용해서 원래대로 user4 사용자를 되살려 볼것




===============================================================================================

리눅스 압축
 
gzip	: 압축 속도가 빠름, 압축률이 일정하지 않음


bzip2	: 압축 속도가 느림, 압축률이 일정


gzip 압축
	gzip [파일명]	== gz 확장자, 원본 사라짐	
푸는 방법
	gunzip [파일명], gzip -d [파일명]

bzip2 압축
	bzip2 [파일명] 	== bz2 확장자, 원본 사라짐

bzip2 해제
	bunzip2 [파일명]
	bzip2 -d [파일명]


------> 1개 밖에 안된다

tar 사용법
	보관 : tar cvf [archiving file].tar [source]	
	
	c : 생성, v : 보여줌, f : 파일묶음지정 => 이걸 압축하면 다중압축이된다
					
	해제 : tar xvf [archiving file].tar
	ex)	tar cvf /home/bunlist.tar /bin/*
	ex)	tar cvfz /home/bunlist.tar.gz /bin/*
	ex) 	tar cvfj /home/bunlist.tar.bz2 /bin/*
	x : 풀기
	cvfz : gzip
	cvfj : bunzip2
========================================================================================================

RPM ( redhat package manager )

linux package installation

1. 소스 - 컴파일 - 환경설정 - 설치 - 실행 : tar & make

2. X	   X	     X	- 설치 - 실행 : rpm
    [       package            ]

3. 				인터넷 : yum


http://www.centos.org


패키지 파일 구조


ex) vim-enhanced-7.0.109-3.i386.rpm

                 1      2 3  4   5  6     7

1. 패키지명 == - 을 기준으로 왼쪽 문자열까지 패키지명으로 분리
2. 주버전 (major) == version up
3. 보조버젼 (minor) == 치명적 오류, 버그 수정 횟수 == upgrade
4. 수정버젼 (patch) ==  사소한 오류, 버그 수정 횟수 == update
5. 배포버젼 (release) 
6. 아키텍쳐 == i386, i586, i686 => 32bit     x86_64 => 64bit
7. 확장자


rpm 사용형식

설치 : rpm -ivh [package]...rpm

	i : 설치, v : 보여줌  h : #(hash) 형식으로 표시

삭제 : rpm -e [package]
	e : 삭제
확인 : rpm -qa | grep [package]

	qa : 시스템에 설치되어 있는 전체 패키지 목록 조회
	grep : 패턴검색 명령어 
tab키 이용시 마저 다 입력해줌

유의 사항
1. 의존성 오류(Failed dependencies) 를 절대 무시하지 마라

2. 의존성 오류가 제기된다면 의존성 오류를 제기한것부터 작업한다.

3. 가급적 의존성 오류 무시 옵션 (--nodeps)을 사용하지 말자

4. lib으로 시작을 하고 중간에 so가 들어간 것들은 무시한다 
   디렉토리 구조로 표시되는 것들은 무시한다.

5. 패키지는 대표 패키지부터 작업을한다

6. 나머지는 화면에 보이는 순서대로 작업을 한다

7. 패키지는 버전을 일치시켜주도록 한다.

perl(TEST::more) -> oerk-test-simple로 ㄷ체
-------------------------------------------------
사이트에서 mariadb로 시작하는 패키지들을 찾아서 본인 리눅스 서버에 설치



yum
== RPM 기반 시스템에서 사용하는 패키지 설치/삭제 도구
== 의존성을 스스로 해결 == 사용자가 의존성을 해결할 필요가 없다
== 인터넷 연결이 되어야만 사용가능
== 작업할 패키지명을 알고 사용

yum update => 리눅스 초기설정 작업 중 하나
== 시스템에서 업데이트 가능한 페키지 목록 조회 후 업데이트 작업

yum install [패키지명] == 패키지 설치
yum remove [패키지명] == 패키지 삭제

-y옵션시 묻지않고 작업

패키지 수동 설치(노 인터넷)
cd /mnt/cdrom/Packages
========================================================================================================

HDD & partition

플래터 : 비자성체 금속 (알루미늄) 으로 만들어진 원판 모양의 disk에 산화금속막을 양면에 도장 == 산화금속막을 논리적으로 나누어주는 개념 == 파티셔닝

스핀들 : 플래터를 회전시켜주는 역할

헤드 : 플래터 표면에 코팅된 자성체에서 정보를 읽기, 쓰기, 삭제를 하는 장치
	== 일반적으로 플래터 *2
	== 플래터 회전시 생기는 공기압으로 플래터 위를 비행하면서 동작 


linux partition type
	
	1. primary partition : 주 영역 파티션, 최대 4개까지만 생성 가능

	2. extended partition : 확장 영역 파티션, 1개만 생성 가능
	
	3. logical partition : 논리 영역 파티션, extended partition안에 만들어지기 때문에 이 용량안에서만 생성 가능

	=> 5개 이상의 파티션일지 3,1,2, => primary+ logical = 5
	=> 6개일시 3,1,3

HDD type		== 시스템 자동 부여

	IDE : 병렬	: hd + [문자]

	-> hda, hdb, hdc, hdd ....
		      == hdc는 HDD 명칭으로는 사용불가
		      == CD-ROM 명칭으로 사용
		

	SCSI : 직렬	: sd + [문자]

	-> sda, sdb, sdc, sdd ....

partition type	== 사용자 직접 부여(제한적)

	IDE HDD + [숫자]
	
	-> hda1, hdb2, hdd3 ....

	SCSI HDD + [숫자]

	-> sda1, sdb2, sdc3 ....		

logical은 5번부터 시작한다

1. HDD 추가하기

2. 디스크 인식 확인하기

	fdisk -l 장치명
	
	ex) fdisk -l /dev/hd*
	     fdisk -l /dev/sd*

	== 5.x 까지는 IDE, SCSI 별도 표시
	== 6.x 부터는 SISC으로 통합 표시


3. 디스크 파티션 생성

	fdisk [장치명]

	ex) fdisk /dev/sdb
	
	d : 파티션 삭제
	n : 파티션 생성
	p : 파티션 목록 확인
	q : 저장하지 않고 나가기
	w : 저장 후 나가기

4. 파일 시스템 생성 == format

	mkfs -t [파일시스템] [장치명]
	
	mkfs.[파일시스템] [장치명]
	
	ex) mkfs.xfs /dev/sdb1

	확인법 == blkid [장치명]

	기본 파일 시스템 : 5.x : ext3, 6.x : ext4, 7.x : xfs

	xfs == 64bit filesystem, 대용량 파일 시스템
	     == 저널링 == 신속한 복구 및 빠른 재시작
		== 예기치 못한 상황에서의 빠른 재시작 및 신속한 복구 기능 지원

5. mount (마운트)

	설정 ex) mount /dev/sdb1 /mnt/cdrom
			장치명	  임의의 디렉토리 == mount point
	해제 ex) umount  "  또는 	"

	CD-ROM mount

	ex)	mount /dev/hdc /mnt/cdrom = > 5.x까지 사용했음

		mount /dev/cdrom /mnt/cdrom
	
		mount /dev/sdb1 /mnt/cdrom

	CD-ROM 표기명

	5.x : hdc, cdrom
	6.x ~ : cdrom, sr0

	df -h : 디스크 사용량 확인가능(mount정보를 보기 편하게 할 수 있음)

	mount 유의사항

	1. mount 또는 umount 시에는 mount point만 아니라면 어느곳이든 상관없음
	
	2. 사용자와 관련된 것들, 데이터가 있는 디렉토리를 mount point로 사용하지 않는다.
		
	3. 한개의 파티션은 한개의 mount point만 가지는 것이 정석(여러개여도 상관은 없다)	
	
	4. 작업하는 대상 partition은 주 파티션과 논리 파티션뿐이다.

	== 파티션 설정 완료 이후에 .. the new table will be used at the next reboot..
	    위와 같은 메세지가 출력된다면 반드시 재부팅 할 것






실습 1.
	IDE HDD 1GB 제거 후 SCSI HDD 1GB 추가
	
	
	300M : primary partition

	400M : logical partition
	
	CD-ROM mount, partition mount 까지 작업해볼 것

	마운트 포인트 자유 ~ 본인 마음대로 사용

====================================================================
실습2
	CD mount 를 통해 mariadb 패키지를 네트워크 없이 수동으로 설치할 것

=================
kernel = 하드웨어를 다를수 있는 운영체제같은거
==========================================================

관리자 비밀번호 재설정

1. 부팅시 보이는 kernel 선택 화면에서 최신 kernel 버전을 선택한 후에 e 키를 누른다

2. linux16.. 으로 시작하는 라인을 편집

	== 위에서부터 rhgd 부분까지 삭제 후 init=/bin/bash or init=/bin/sh
	== ro -> rw
	== ctrk+x = 부팅

3. passwd 명령으로 비밀번호 재설정

4. exec /sbin/init == 재부팅 후 root 로그인 확인
=====> 보안 취약

==============================================================

	부트 로더(boot loader) == 초기 적재 프로그램

== 운영체제가 시동되기 이전에 미리 실행되면서 kernel 이 올바르게 동작할 수 있도록 필요한 사전 작업을 마무리하고 최종적으로 운영체제를 시동시켜주기 위한 목적을 가진 프로그램

	grub 부트로더 설정 파일 : /boot/grub2/grub.cfg == 원본
				/etc/grub2.cfg == 링크파일

	== 관리자도 해당 파일을 직접적으로 편집하지 않는다
	== 설정 변경시에는 /etc/grub.d 경로에 파일들과 /etc/default/grub 파일을 편집
	
	== 변경 사항 재적용시에는 grub2-mkconfig -o 형식으로 설정 적용



grub 접근 보안 == 리눅스 초기 보안 설정 작업 중 하나

/etc/grub.d/00_header 파일 편집

ex) cat << EOF
     set superusers="grubadmin"
     password grubadmin 1111
     EOF

     grub2-mkconfig -o /boot/grub2/grub.cfg

==================================================================================

process == cpu에서 실행되는 모든 프로그램

포그라운드 프로세스 : 화면에 보이는 상태에서 동작하는 프로세스

ex) 대화형 프로세스

백그라운드 프로세스 : 화면에 보이지 않는 상태에서 동작하는 프로세스

ex) 데몬 프로세스
== 특정 서비스를 위해 백그라운드 상태에서 동작하는 서버 프로세스


ps -ef : 모든 프로세스의 자세한 정보 표시(작업관리자)

UID	PID	PPID	C   STIME    TTY                       TIME    CMD
1	4	x	6       2         3		          5         4     :  결과를 해석하는 순서

	==같은 번호는 동일한 의미===============================
             == 명령을 입력하면 PID는 숫자로 표시 ====================
UID : user id
PID : process id == PPID의 자식프로세스
PPID : parent id = PID의 부모프로세스
C : cpu 사용량, 점유율
STIME : 접근 시간
TTY : tty = teletypewriter == consol 접속
        pts = pusedo terminal service == 가상 consol 접속 == 원격 접속
TIME : 사용시간
CMD : 명령어

== 1번이 2번때 3번을 통해 접근을 한 후에 4번을 실행시키는데 걸리는 시간이 5번이고 이때 사용한 cpu 점유율이 6번이다.
	
pstree : 실행되고 있는 프로세스 상태를 tree형태로 표시하는 명령어

kill : 프로세스 중지, 삭제 명령어
kill PID : 원격 접속한 계정 종료(ex)itbank)
좀비 프로세스 : 부모 프로세스가 죽었는데도 살아있는 경우

=============================================================================

run level
	6.x 까지는 /etc/inittab 파일에서 실행
	
	0 - halt			== 종료 == 기본값으로는 사용 안함
	1 - single user mode	== 단일사용자(ROOT), 윈도우 안전모드 == 비밀번호 재설정, 파일 시스템 수정, 복구
	2 - multi user mode		== 다중사용자, 네트워크 연결 지원 안됨
	3 - full multi user mode	== 다중사용자, 네트워크 연결 지원
	4 - unused		== 예약필드
		1~3 까지는 부팅환경이 CLI 환경
	5 - X11			== 그래픽환경 모드 지원
	6 - reboot		== 재시작 == 기본값으로는 쓰지 않는다
	id:[run level]:initdefault:	== 해당 라인에서 런레벨 단계 변경

	7.x 부터는 target형식의 명칭으로 변경
	
	runlevel 0		->	poweroff.target 
	runlevel 1		->	rescue.target

	runlevel 2
	runlevel 3		->	multi-user.target
	runlevel 4

	runlevel 5		->	graphical.target
	runlevel 6		->	reboot.target
	
	
	시스템 기본 target 확인 : systemctl get-default
	ex) ln -sf /usr/lib/systemd/system/[target].target /etc/systemd/system/default.target
	exec /sbin/init
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
		
	
	
	











